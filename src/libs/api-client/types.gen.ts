// This file is auto-generated by @hey-api/openapi-ts

export type TokenRefresh = {
  refresh: string;
  readonly access?: string;
};

export type CompetitionType = {
  readonly id?: number;
  name:
    | "running"
    | "trail"
    | "ultramarathon"
    | "cycling"
    | "online"
    | "walking"
    | "ocr"
    | "swimming"
    | "triathlon";
};

export type Organization = {
  readonly id?: number;
  readonly users?: string;
  phoneNumbers?: Array<string>;
  name: string;
  siteUrl?: string | null;
  email: string;
  instagramUrl?: string | null;
  facebookUrl?: string | null;
  telegramUrl?: string | null;
  readonly mainImage?: string | null;
  readonly backgroundImage?: string | null;
};

export type PublicDistanceEvent = {
  readonly id?: number;
  name: string;
};

export type AdditionalItemEvent = {
  id?: number;
  itemType: string;
  price?: string | null;
  distance?: number;
};

export type DistanceUserList = {
  readonly id?: number;
  firstName: string;
  startingNumber?: number;
  city?: string | null;
  gender?: ("M" | "F") | null;
  dateOfBirth?: Date | null;
  sportsClub?: string | null;
  distance: PublicDistanceEvent;
  additionalItems: Array<AdditionalItemEvent>;
};

export type DistanceUserDetail = {
  readonly id?: number;
  registrationDate?: Date;
  email: string;
  firstName: string;
  lastName: string;
  firstNameEng?: string | null;
  lastNameEng?: string | null;
  gender?: ("M" | "F") | null;
  dateOfBirth?: Date | null;
  tShirtSize?: ("XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL") | null;
  country?: string | null;
  city?: string | null;
  phoneNumber?: string | null;
  sportsClub?: string | null;
  emergencyContactName?: string | null;
  emergencyContactPhone?: string | null;
  distance?: PublicDistanceEvent;
  readonly additionalItems?: Array<AdditionalItemEvent>;
};

export type UserDistanceRegistration = {
  readonly id?: number;
  registrationDate?: Date;
  email: string;
  firstName: string;
  lastName: string;
  firstNameEng?: string | null;
  lastNameEng?: string | null;
  gender?: ("M" | "F") | null;
  startingNumber?: number;
  dateOfBirth?: Date | null;
  tShirtSize?: ("XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL") | null;
  country?: string | null;
  city?: string | null;
  phoneNumber?: string | null;
  sportsClub?: string | null;
  emergencyContactName?: string | null;
  emergencyContactPhone?: string | null;
  promoCode?: number;
  additionalItems?: Array<number>;
};

export type UserProfile = {
  readonly id?: number;
  readonly email?: string;
  role?: "user" | "organizer" | "admin";
  firstName: string;
  lastName: string;
  firstNameEng: string;
  lastNameEng: string;
  gender: "M" | "F";
  dateOfBirth?: Date | null;
  tShirtSize?: ("XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL") | null;
  country: string;
  city: string;
  phoneNumber: string;
  sportsClub?: string | null;
  emergencyContactName: string;
  emergencyContactPhone: string;
  readonly avatar?: string | null;
};

export type AdditionalProfile = {
  readonly id?: number;
  firstName: string;
  lastName: string;
  firstNameEng: string;
  lastNameEng: string;
  gender: "M" | "F";
  dateOfBirth?: Date | null;
  tShirtSize?: ("XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL") | null;
  country: string;
  city: string;
  phoneNumber: string;
  sportsClub?: string | null;
  emergencyContactName: string;
  emergencyContactPhone: string;
  email: string;
};

export type CostChangeRule = {
  id?: number;
  cost: string;
  fromParticipants?: number | null;
  fromDate?: Date | null;
};

export type AgeCategory = {
  id?: number;
  name: string;
  gender: "M" | "F";
  ageFrom: number;
  ageTo: number;
  readonly distance?: number;
};

export type PromoCode = {
  id?: number;
  name: string;
  promoType: "flat" | "percentage" | "sum_registration" | "free";
  discountValue: string;
  isActive?: boolean;
  isSingleUse?: boolean;
  readonly distance?: number;
};

export type DistanceEvent = {
  id?: number;
  name: string;
  competitionType?:
    | "running"
    | "trail"
    | "ultramarathon"
    | "cycling"
    | "online"
    | "walking"
    | "ocr"
    | "swimming"
    | "triathlon";
  category?:
    | "adults"
    | "children"
    | "men"
    | "women"
    | "disabled"
    | "veterans"
    | "pupils"
    | "boys"
    | "juniors"
    | "students"
    | "teachers";
  allowRegistration?: boolean;
  length?: string | null;
  startNumberFrom?: number | null;
  startNumberTo?: number | null;
  ageFrom?: number | null;
  ageTo?: number | null;
  cost?: string | null;
  isFree?: boolean;
  promoOnlyRegistration?: boolean;
  showNameOnNumber?: boolean;
  showStartNumber?: boolean;
  event?: number;
  additionalOptions?: Array<AdditionalItemEvent>;
  costChangeRules?: Array<CostChangeRule>;
  ageCategories?: Array<AgeCategory>;
  promoCodes?: Array<PromoCode>;
};

export type Event = {
  readonly id?: number;
  name: string;
  readonly organizer?: string;
  organization_id: number;
  competitionType: Array<CompetitionType>;
  dateFrom: Date;
  dateTo: Date;
  place: string;
  placeRegion:
    | (
        | "vinnytsia_region"
        | "volyn_region"
        | "dnipropetrovsk_region"
        | "donetsk_region"
        | "zhytomyr_region"
        | "zakarpattia_region"
        | "zaporizhzhia_region"
        | "ivano-frankivsk_region"
        | "kyiv_region"
        | "kirovohrad_region"
        | "luhansk_region"
        | "lviv_region"
        | "mykolaiv_region"
        | "odesa_region"
        | "poltava_region"
        | "rivne_region"
        | "sumy_region"
        | "ternopil_region"
        | "kharkiv_region"
        | "kherson_region"
        | "khmelnytskyi_region"
        | "cherkasy_region"
        | "chernihiv_region"
        | "chernivtsi_region"
      )
    | null;
  readonly photos?: string | null;
  description?: string;
  registrationLink?: string | null;
  hideParticipants?: boolean;
  readonly schedulePdf?: string | null;
  coOrganizer?: string | null;
  distances: Array<DistanceEvent>;
  extendedDescription?: string | null;
};

export type AuthenticationActivateReadData = {
  path: {
    token: string;
    /**
     * Activation token for the user
    /**
     * User's unique identifier
     */
    uid: string;
  };
};

export type AuthenticationActivateReadResponse = {
  /**
   * Your account has been activated successfully
   */
  detail: string;
};

export type AuthenticationActivateReadError =
  | {
      /**
       * Bad request
       */
      detail: string;
    }
  | {
      /**
       * User does not exist
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server
       */
      detail: string;
    };

export type AuthenticationLoginCreateData = {
  body: {
    /**
     * User email address
     */
    email: string;
    /**
     * User password
     */
    password: string;
  };
};

export type AuthenticationLoginCreateResponse = {
  accessToken: {
    /**
     * JWT Access Token
     */
    value: string;
    /**
     * Expiration time of the access token in seconds
     */
    expires: number;
  };
  refresh_token?: {
    /**
     * JWT Refresh Token
     */
    value: string;
    /**
     * Expiration time of the refresh token in seconds
     */
    expires: number;
  };
};

export type AuthenticationLoginCreateError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type AuthenticationRegisterCreateData = {
  body: {
    /**
     * User email address
     */
    email: string;
    /**
     * User password
     */
    password: string;
    /**
     * Password confirmation
     */
    password2: string;
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * Phone number
     */
    phoneNumber: string;
    /**
     * Date of birth (YYYY-MM-DD)
     */
    dateOfBirth: Date;
    /**
     * Gender (M for Male, F for Female)
     */
    gender: "M" | "F";
    /**
     * T-shirt size
     */
    tShirtSize?: "XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
    /**
     * Country
     */
    country: string;
    /**
     * City
     */
    city: string;
    /**
     * Sports club
     */
    sportsClub?: string;
    /**
     * Emergency contact name
     */
    emergencyContactName: string;
    /**
     * Emergency contact phone number
     */
    emergencyContactPhone: string;
  };
};

export type AuthenticationRegisterCreateResponse = {
  /**
   * Verify your account from email
   */
  detail: string;
};

export type AuthenticationRegisterCreateError =
  | {
      /**
       * Password must contain at least 1 uppercase letter.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server
       */
      detail: string;
    };

export type AuthenticationResetPasswordConfirmData = {
  body: {
    /**
     * User ID from the password reset link
     */
    uid: string;
    /**
     * Password reset token
     */
    token: string;
    /**
     * New password for the user
     */
    new_password: string;
  };
};

export type AuthenticationResetPasswordConfirmResponse = {
  /**
   * Your password has been successfully changed.
   */
  detail: string;
};

export type AuthenticationResetPasswordConfirmError =
  | {
      /**
       * Invalid token or password.
       */
      detail: string;
    }
  | {
      /**
       * User not found or invalid request.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type AuthenticationResetPasswordData = {
  body: {
    /**
     * User email address
     */
    email: string;
  };
};

export type AuthenticationResetPasswordResponse = {
  /**
   * A password reset email has been sent to the provided email address.
   */
  detail: string;
};

export type AuthenticationResetPasswordError =
  | {
      /**
       * Email field is required or invalid.
       */
      detail: string;
    }
  | {
      /**
       * Email not found in the database.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type AuthenticationTokenRefreshCreateData = {
  body: TokenRefresh;
};

export type AuthenticationTokenRefreshCreateResponse = TokenRefresh;

export type AuthenticationTokenRefreshCreateError = unknown;

export type CustomAdminCompetitionTypeListData = {
  query?: {
    /**
     * Page number for pagination
     */
    page?: number;
  };
};

export type CustomAdminCompetitionTypeListResponse = {
  pagination: {
    /**
     * URL to the next page or null if there is no next page
     */
    next_page?: string;
    /**
     * The current page number
     */
    current_page: number;
    /**
     * URL to the previous page or null if there is no previous page
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of items
   */
  items_count: number;
  items: Array<{
    /**
     * ID of the competition type
     */
    id: number;
    /**
     * Name of the competition type
     */
    name: string;
  }>;
};

export type CustomAdminCompetitionTypeListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Competition type not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type CustomAdminCompetitionTypeCreateData = {
  body: {
    /**
     * Name of the competition type
     */
    name:
      | "running"
      | "trail"
      | "ultramarathon"
      | "cycling"
      | "online"
      | "walking"
      | "ocr"
      | "swimming"
      | "triathlon";
  };
};

export type CustomAdminCompetitionTypeCreateResponse = {
  /**
   * ID of the newly created competition type
   */
  id: number;
  /**
   * Name of the newly created competition type
   */
  name: string;
};

export type CustomAdminCompetitionTypeCreateError =
  | {
      /**
       * Invalid competition type data.
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type CustomAdminCompetitionTypeReadData = {
  path: {
    competition_type_id: string;
  };
  query?: {
    /**
     * Page number for pagination
     */
    page?: number;
  };
};

export type CustomAdminCompetitionTypeReadResponse = {
  pagination: {
    /**
     * URL to the next page or null if there is no next page
     */
    next_page?: string;
    /**
     * The current page number
     */
    current_page: number;
    /**
     * URL to the previous page or null if there is no previous page
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of items
   */
  items_count: number;
  items: Array<{
    /**
     * ID of the competition type
     */
    id: number;
    /**
     * Name of the competition type
     */
    name: string;
  }>;
};

export type CustomAdminCompetitionTypeReadError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Competition type not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type CustomAdminCompetitionTypeUpdateData = {
  body: CompetitionType;
  path: {
    competition_type_id: string;
  };
};

export type CustomAdminCompetitionTypeUpdateResponse = CompetitionType;

export type CustomAdminCompetitionTypeUpdateError =
  | {
      /**
       * Invalid competition type data.
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Competition type not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type CustomAdminCompetitionTypeDeleteData = {
  path: {
    competition_type_id: string;
  };
};

export type CustomAdminCompetitionTypeDeleteResponse = void;

export type CustomAdminCompetitionTypeDeleteError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Competition type not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type CustomAdminEventUpdateStatusListResponse = {
  pagination: {
    /**
     * URL for the next page of results
     */
    next_page?: string;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * URL for the previous page of results
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of events
   */
  items_count: number;
  items: Array<{
    /**
     * ID of the event
     */
    id: number;
    /**
     * Name of the event
     */
    name: string;
    /**
     * Organizer of the event
     */
    organizer: string;
    /**
     * Types of competitions associated with the event
     */
    competitionType: Array<number>;
    /**
     * Start date of the event
     */
    dateFrom: Date;
    /**
     * End date of the event
     */
    dateTo: Date;
    /**
     * Status of the event
     */
    status: string;
  }>;
};

export type CustomAdminEventUpdateStatusListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type CustomAdminEventUpdateStatusCreateData = {
  body: {
    /**
     * New status of the event (e.g., pending, published, unpublished)
     */
    status: "pending" | "published" | "unpublished";
  };
  path: {
    event_id: string;
  };
};

export type CustomAdminEventUpdateStatusCreateResponse = {
  /**
   * Confirmation message that the event status was successfully updated.
   */
  message: string;
};

export type CustomAdminEventUpdateStatusCreateError =
  | {
      /**
       * Error message indicating why the request was invalid.
       */
      detail:
        | "Status is not a valid choice."
        | "The event status is already set to [status]. No changes were made.";
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Event not found.
       */
      detail: string;
    };

export type CustomAdminUserApproveOrganizerListResponse = {
  pagination: {
    /**
     * URL for the next page of results
     */
    next_page?: string;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * URL for the previous page of results
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of requests
   */
  items_count: number;
  items: Array<{
    /**
     * ID of the request
     */
    id: number;
    /**
     * ID of the user who made the request
     */
    user: number;
    /**
     * Approval status of the request
     */
    isApproved: boolean;
    /**
     * Date and time when the request was created
     */
    createdAt: Date;
  }>;
};

export type CustomAdminUserApproveOrganizerListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type CustomAdminUserApproveOrganizerCreateData = {
  path: {
    user_id: string;
  };
};

export type CustomAdminUserApproveOrganizerCreateResponse = unknown;

export type CustomAdminUserApproveOrganizerCreateError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Request not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationListResponse = {
  pagination: {
    /**
     * URL for the next page of results
     */
    next_page?: string;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * URL for the previous page of results
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of organizations
   */
  items_count: number;
  items: Array<{
    /**
     * ID of the organization
     */
    id: number;
    users: Array<{
      /**
       * Email of the user
       */
      user: string;
      /**
       * Role of the user in the organization
       */
      role: string;
    }>;
    /**
     * List of phone numbers for the organization
     */
    phoneNumbers: Array<string>;
    /**
     * Name of the organization
     */
    name: string;
    /**
     * URL of the organization website
     */
    siteUrl?: string;
    /**
     * Email of the organization
     */
    email: string;
    /**
     * Instagram URL of the organization
     */
    instagramUrl?: string;
    /**
     * Facebook URL of the organization
     */
    facebookUrl?: string;
    /**
     * Telegram URL of the organization
     */
    telegramUrl?: string;
    /**
     * Main image of the organization
     */
    mainImage?: string;
    /**
     * Background image of the organization
     */
    backgroundImage?: string;
  }>;
};

export type OrganizationListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationCreateData = {
  body: Organization;
};

export type OrganizationCreateResponse = Organization;

export type OrganizationCreateError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationReadData = {
  path: {
    organization_id: string;
  };
};

export type OrganizationReadResponse = {
  pagination: {
    /**
     * URL for the next page of results
     */
    next_page?: string;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * URL for the previous page of results
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of organizations
   */
  items_count: number;
  items: Array<{
    /**
     * ID of the organization
     */
    id: number;
    users: Array<{
      /**
       * Email of the user
       */
      user: string;
      /**
       * Role of the user in the organization
       */
      role: string;
    }>;
    /**
     * List of phone numbers for the organization
     */
    phoneNumbers: Array<string>;
    /**
     * Name of the organization
     */
    name: string;
    /**
     * URL of the organization website
     */
    siteUrl?: string;
    /**
     * Email of the organization
     */
    email: string;
    /**
     * Instagram URL of the organization
     */
    instagramUrl?: string;
    /**
     * Facebook URL of the organization
     */
    facebookUrl?: string;
    /**
     * Telegram URL of the organization
     */
    telegramUrl?: string;
    /**
     * Main image of the organization
     */
    mainImage?: string;
    /**
     * Background image of the organization
     */
    backgroundImage?: string;
  }>;
};

export type OrganizationReadError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationUpdateData = {
  body: Organization;
  path: {
    organization_id: string;
  };
};

export type OrganizationUpdateResponse = Organization;

export type OrganizationUpdateError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationPartialUpdateData = {
  body: Organization;
  path: {
    organization_id: string;
  };
};

export type OrganizationPartialUpdateResponse = Organization;

export type OrganizationPartialUpdateError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationDeleteData = {
  path: {
    organization_id: string;
  };
};

export type OrganizationDeleteResponse = void;

export type OrganizationDeleteError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventListData = {
  path: {
    organization_id: string;
  };
  query?: {
    /**
     * Indicates whether to include archived records. Use "archives=true" to filter by archived data.
     */
    archives?: string;
  };
};

export type OrganizationEventListResponse = {
  pagination: {
    /**
     * Next page number in pagination
     */
    next_page?: number;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * Previous page number in pagination
     */
    previous_page?: number;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of items
   */
  items_count: number;
  items: Array<{
    /**
     * Event ID
     */
    id: number;
    /**
     * Event name
     */
    name: string;
    competitionType: Array<{
      /**
       * Competition type ID
       */
      id: number;
      /**
       * Competition type name
       */
      name: string;
    }>;
    /**
     * Event start date
     */
    dateFrom: string;
    /**
     * Event end date
     */
    dateTo: string;
    /**
     * Event location
     */
    place: string;
    /**
     * Region of the event
     */
    placeRegion: string;
    /**
     * Event photos URL
     */
    photos?: string;
    /**
     * Short description of the event
     */
    description?: string;
    /**
     * Registration link for the event
     */
    registrationLink?: string;
    /**
     * Flag to hide participants
     */
    hideParticipants?: boolean;
    /**
     * Schedule PDF link
     */
    schedulePdf?: string;
    /**
     * Co-Organizer of the event
     */
    coOrganizer?: string;
    organizer: {
      /**
       * Organizer ID
       */
      id: number;
      /**
       * Organizer user email
       */
      user: string;
      /**
       * Organizer organization name
       */
      organization: string;
    };
    distances: Array<{
      /**
       * Distance ID
       */
      id: number;
      /**
       * Distance name
       */
      name: string;
      /**
       * Competition type for this distance
       */
      competitionType: string;
      /**
       * Category of participants
       */
      category: string;
      /**
       * Flag for registration availability
       */
      allowRegistration: boolean;
      /**
       * Distance length
       */
      length: string;
      /**
       * Start number range (from)
       */
      startNumberFrom: number;
      /**
       * Start number range (to)
       */
      startNumberTo: number;
      /**
       * Minimum age for the distance
       */
      ageFrom?: number;
      /**
       * Maximum age for the distance
       */
      ageTo?: number;
      /**
       * Cost for participation
       */
      cost: string;
      /**
       * Whether the participation is free
       */
      isFree: boolean;
      /**
       * Promo-only registration flag
       */
      promoOnlyRegistration: boolean;
      /**
       * Whether to show name on number
       */
      showNameOnNumber: boolean;
      /**
       * Whether to show start number
       */
      showStartNumber: boolean;
      /**
       * Associated event ID
       */
      event: number;
      additionalOptions?: Array<{
        /**
         * Option ID
         */
        id: number;
        /**
         * Type of additional item
         */
        itemType: string;
        /**
         * Price of additional item
         */
        price: string;
        /**
         * Associated distance ID
         */
        distance: number;
      }>;
      /**
       * List of cost change rules for the distance
       */
      costChangeRules?: Array<{
        /**
         * Cost change rule ID
         */
        id: number;
        /**
         * Updated cost for the distance
         */
        cost: string;
        /**
         * Minimum number of participants to apply this rule
         */
        fromParticipants?: number;
        /**
         * Date from which the cost rule applies
         */
        fromDate: Date;
      }>;
      /**
       * List of age categories for the distance
       */
      ageCategories?: Array<{
        /**
         * Age category ID
         */
        id: number;
        /**
         * Name of the age category
         */
        name: string;
        /**
         * Gender for the category
         */
        gender: string;
        /**
         * Minimum age for the category
         */
        ageFrom: number;
        /**
         * Maximum age for the category
         */
        ageTo: number;
      }>;
      /**
       * List of promo codes for the distance
       */
      promoCodes?: Array<{
        /**
         * Promo code ID
         */
        id: number;
        /**
         * Promo code name
         */
        name: string;
        /**
         * Promo type (e.g., percentage discount)
         */
        promoType: string;
        /**
         * Discount value for the promo code
         */
        discountValue: number;
        /**
         * Whether the promo code is active
         */
        isActive: boolean;
        /**
         * Whether the promo code can be used only once
         */
        isSingleUse?: boolean;
      }>;
    }>;
    /**
     * Extended event description
     */
    extendedDescription?: string;
  }>;
};

export type OrganizationEventListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventCreateData = {
  body: {
    /**
     * Name of the event
     */
    name: string;
    /**
     * List of competition types
     */
    competitionType: Array<{
      /**
       * Type of competition
       */
      name: string;
    }>;
    /**
     * Event start date
     */
    dateFrom: Date;
    /**
     * Event end date
     */
    dateTo: Date;
    /**
     * Location of the event
     */
    place: string;
    /**
     * Location of the event
     */
    placeRegion: string;
    /**
     * Event description
     */
    description?: string;
    /**
     * Registration link
     */
    registrationLink?: string;
    /**
     * Whether to hide participants
     */
    hideParticipants?: boolean;
    /**
     * Co-Organizer description
     */
    coOrganizer?: string;
    /**
     * ID of the organizer
     */
    organization_id: number;
    /**
     * List of distances
     */
    distances: Array<{
      /**
       * Name of the distance
       */
      name: string;
      /**
       * Type of competition
       */
      competitionType: string;
      /**
       * Category of participants
       */
      category: string;
      /**
       * Length of the distance in km
       */
      length: number;
      /**
       * Starting number
       */
      startNumberFrom: number;
      /**
       * Ending number
       */
      startNumberTo: number;
      /**
       * Show start number
       */
      showStartNumber: boolean;
      /**
       * Show name on the number
       */
      showNameOnNumber: boolean;
      /**
       * Minimum age
       */
      ageFrom?: number;
      /**
       * Maximum age
       */
      ageTo?: number;
      /**
       * Cost of the distance
       */
      cost: number;
      /**
       * Is the distance free
       */
      isFree: boolean;
      /**
       * Promo-only registration
       */
      promoOnlyRegistration: boolean;
      /**
       * Allow registration
       */
      allowRegistration: boolean;
      /**
       * Additional options for the distance
       */
      additionalOptions?: Array<{
        /**
         * Type of additional option
         */
        itemType: string;
        /**
         * Price of additional option
         */
        price: number;
      }>;
      /**
       * List of cost change rules for the distance
       */
      costChangeRules?: Array<{
        /**
         * Updated cost for the distance
         */
        cost: string;
        /**
         * Minimum number of participants to apply this rule
         */
        fromParticipants?: number;
        /**
         * Start date for the cost change rule
         */
        fromDate: Date;
      }>;
      /**
       * List of age categories for the distance
       */
      ageCategories?: Array<{
        /**
         * Name of the age category
         */
        name: string;
        /**
         * Gender for the category (e.g., male, female)
         */
        gender: string;
        /**
         * Minimum age for this category
         */
        ageFrom: number;
        /**
         * Maximum age for this category
         */
        ageTo: number;
      }>;
      /**
       * List of promo codes for the distance
       */
      promoCodes?: Array<{
        /**
         * Name of the promo code
         */
        name: string;
        /**
         * Type of promo code (e.g., discount, free entry)
         */
        promoType: string;
        /**
         * Value of the discount
         */
        discountValue: number;
        /**
         * Whether the promo code is active
         */
        isActive: boolean;
        /**
         * Whether the promo code can only be used once
         */
        isSingleUse?: boolean;
      }>;
    }>;
    /**
     * Extended description of the event
     */
    extendedDescription?: string;
  };
  path: {
    organization_id: string;
  };
};

export type OrganizationEventCreateResponse = {
  /**
   * Event ID
   */
  id: number;
  /**
   * Event name
   */
  name: string;
  competitionType: Array<{
    /**
     * id of competition type
     */
    id: string;
    /**
     * Type of competition
     */
    name: string;
  }>;
  /**
   * Event start date
   */
  dateFrom: string;
  /**
   * Event end date
   */
  dateTo: string;
  /**
   * Event location
   */
  place: string;
  /**
   * Region of the event
   */
  placeRegion: string;
  /**
   * Event photos URL
   */
  photos?: string;
  /**
   * Short description of the event
   */
  description?: string;
  /**
   * Registration link for the event
   */
  registrationLink?: string;
  /**
   * Hide participants flag
   */
  hideParticipants?: boolean;
  /**
   * Schedule PDF link
   */
  schedulePdf?: string;
  /**
   * Co-Organizer description
   */
  coOrganizer?: string;
  organizer: {
    /**
     * Organizer ID
     */
    id: number;
    users: Array<{
      /**
       * User email
       */
      user: string;
      /**
       * User role
       */
      role: string;
    }>;
    /**
     * Organizer name
     */
    name: string;
    /**
     * Organizer website
     */
    siteUrl?: string;
    /**
     * Organizer phone number
     */
    phoneNumber?: string;
    /**
     * Organizer email
     */
    email: string;
    /**
     * Organizer Instagram URL
     */
    instagramUrl?: string;
    /**
     * Organizer Facebook URL
     */
    facebookUrl?: string;
    /**
     * Organizer Telegram URL
     */
    telegramUrl?: string;
  };
  distances: Array<{
    /**
     * Distance ID
     */
    id: number;
    /**
     * Distance name
     */
    name: string;
    /**
     * Type of competition
     */
    competitionType: string;
    /**
     * Category of participants
     */
    category: string;
    /**
     * Flag for registration availability
     */
    allowRegistration: boolean;
    /**
     * Distance length
     */
    length: string;
    /**
     * Start number range (from)
     */
    startNumberFrom: number;
    /**
     * Start number range (to)
     */
    startNumberTo: number;
    /**
     * Minimum age
     */
    ageFrom?: number;
    /**
     * Maximum age
     */
    ageTo?: number;
    /**
     * Cost of participation
     */
    cost: string;
    /**
     * Flag indicating free participation
     */
    isFree: boolean;
    /**
     * Promo-only registration flag
     */
    promoOnlyRegistration: boolean;
    /**
     * Flag to show name on number
     */
    showNameOnNumber: boolean;
    /**
     * Flag to show start number
     */
    showStartNumber: boolean;
    /**
     * Associated event ID
     */
    event: number;
    additionalOptions?: Array<{
      /**
       * Option ID
       */
      id: number;
      /**
       * Type of additional item
       */
      itemType: string;
      /**
       * Price of additional item
       */
      price: string;
      /**
       * Associated distance ID
       */
      distance: number;
    }>;
    /**
     * List of cost change rules for the distance
     */
    costChangeRules?: Array<{
      /**
       * Cost change rule ID
       */
      id: number;
      /**
       * Updated cost for the distance
       */
      cost: string;
      /**
       * Minimum number of participants to apply this rule
       */
      fromParticipants?: number;
      /**
       * Start date for the cost change rule
       */
      fromDate: Date;
    }>;
    /**
     * List of age categories for the distance
     */
    ageCategories?: Array<{
      /**
       * Age category ID
       */
      id: number;
      /**
       * Name of the age category
       */
      name: string;
      /**
       * Gender for the category (e.g., male, female)
       */
      gender: string;
      /**
       * Minimum age for this category
       */
      ageFrom: number;
      /**
       * Maximum age for this category
       */
      ageTo: number;
    }>;
    /**
     * List of promo codes for the distance
     */
    promoCodes?: Array<{
      /**
       * Promo code ID
       */
      id: number;
      /**
       * Name of the promo code
       */
      name: string;
      /**
       * Type of promo code (e.g., discount, free entry)
       */
      promoType: string;
      /**
       * Value of the discount
       */
      discountValue: number;
      /**
       * Whether the promo code is active
       */
      isActive: boolean;
      /**
       * Whether the promo code can only be used once
       */
      isSingleUse?: boolean;
    }>;
  }>;
  /**
   * Detailed description of the event
   */
  extendedDescription?: string;
};

export type OrganizationEventCreateError =
  | {
      /**
       * Bad request
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * The competition type does not exist.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventReadData = {
  path: {
    event_id: string;
    organization_id: string;
  };
};

export type OrganizationEventReadResponse = {
  /**
   * Event ID
   */
  id: number;
  /**
   * Event name
   */
  name: string;
  competitionType: Array<{
    /**
     * id of competition type
     */
    id: string;
    /**
     * Type of competition
     */
    name: string;
  }>;
  /**
   * Event start date
   */
  dateFrom: string;
  /**
   * Event end date
   */
  dateTo: string;
  /**
   * Event location
   */
  place: string;
  /**
   * Region of the event
   */
  placeRegion: string;
  /**
   * Event photos URL
   */
  photos?: string;
  /**
   * Short description of the event
   */
  description?: string;
  /**
   * Registration link for the event
   */
  registrationLink?: string;
  /**
   * Hide participants flag
   */
  hideParticipants?: boolean;
  /**
   * Schedule PDF link
   */
  schedulePdf?: string;
  /**
   * Co-Organizer description
   */
  coOrganizer?: string;
  organizer: {
    /**
     * Organizer ID
     */
    id: number;
    users: Array<{
      /**
       * User email
       */
      user: string;
      /**
       * User role
       */
      role: string;
    }>;
    /**
     * Organizer name
     */
    name: string;
    /**
     * Organizer website
     */
    siteUrl?: string;
    /**
     * Organizer phone number
     */
    phoneNumber?: string;
    /**
     * Organizer email
     */
    email: string;
    /**
     * Organizer Instagram URL
     */
    instagramUrl?: string;
    /**
     * Organizer Facebook URL
     */
    facebookUrl?: string;
    /**
     * Organizer Telegram URL
     */
    telegramUrl?: string;
  };
  distances: Array<{
    /**
     * Distance ID
     */
    id: number;
    /**
     * Distance name
     */
    name: string;
    /**
     * Type of competition
     */
    competitionType: string;
    /**
     * Category of participants
     */
    category: string;
    /**
     * Flag for registration availability
     */
    allowRegistration: boolean;
    /**
     * Distance length
     */
    length: string;
    /**
     * Start number range (from)
     */
    startNumberFrom: number;
    /**
     * Start number range (to)
     */
    startNumberTo: number;
    /**
     * Minimum age
     */
    ageFrom?: number;
    /**
     * Maximum age
     */
    ageTo?: number;
    /**
     * Cost of participation
     */
    cost: string;
    /**
     * Flag indicating free participation
     */
    isFree: boolean;
    /**
     * Promo-only registration flag
     */
    promoOnlyRegistration: boolean;
    /**
     * Flag to show name on number
     */
    showNameOnNumber: boolean;
    /**
     * Flag to show start number
     */
    showStartNumber: boolean;
    /**
     * Associated event ID
     */
    event: number;
    additionalOptions?: Array<{
      /**
       * Option ID
       */
      id: number;
      /**
       * Type of additional item
       */
      itemType: string;
      /**
       * Price of additional item
       */
      price: string;
      /**
       * Associated distance ID
       */
      distance: number;
    }>;
    /**
     * List of cost change rules for the distance
     */
    costChangeRules?: Array<{
      /**
       * Cost change rule ID
       */
      id: number;
      /**
       * Updated cost for the distance
       */
      cost: string;
      /**
       * Minimum number of participants to apply this rule
       */
      fromParticipants?: number;
      /**
       * Start date for the cost change rule
       */
      fromDate: Date;
    }>;
    /**
     * List of age categories for the distance
     */
    ageCategories?: Array<{
      /**
       * Age category ID
       */
      id: number;
      /**
       * Name of the age category
       */
      name: string;
      /**
       * Gender for the category (e.g., male, female)
       */
      gender: string;
      /**
       * Minimum age for this category
       */
      ageFrom: number;
      /**
       * Maximum age for this category
       */
      ageTo: number;
    }>;
    /**
     * List of promo codes for the distance
     */
    promoCodes?: Array<{
      /**
       * Promo code ID
       */
      id: number;
      /**
       * Name of the promo code
       */
      name: string;
      /**
       * Type of promo code (e.g., discount, free entry)
       */
      promoType: string;
      /**
       * Value of the discount
       */
      discountValue: number;
      /**
       * Whether the promo code is active
       */
      isActive: boolean;
      /**
       * Whether the promo code can only be used once
       */
      isSingleUse?: boolean;
    }>;
  }>;
  /**
   * Detailed description of the event
   */
  extendedDescription?: string;
};

export type OrganizationEventReadError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventUpdateData = {
  body: {
    /**
     * Name of the event
     */
    name: string;
    /**
     * List of competition types
     */
    competitionType: Array<{
      /**
       * Type of competition
       */
      name: string;
    }>;
    /**
     * Event start date
     */
    dateFrom: Date;
    /**
     * Event end date
     */
    dateTo: Date;
    /**
     * Location of the event
     */
    place: string;
    /**
     * Location of the event
     */
    placeRegion: string;
    /**
     * Event description
     */
    description?: string;
    /**
     * Registration link
     */
    registrationLink?: string;
    /**
     * Whether to hide participants
     */
    hideParticipants?: boolean;
    /**
     * Co-Organizer description
     */
    coOrganizer?: string;
    /**
     * ID of the organizer
     */
    organization_id: number;
    /**
     * List of distances
     */
    distances: Array<{
      /**
       * id
       */
      id?: number;
      /**
       * Name of the distance
       */
      name: string;
      /**
       * Type of competition
       */
      competitionType: string;
      /**
       * Category of participants
       */
      category: string;
      /**
       * Length of the distance in km
       */
      length: number;
      /**
       * Starting number
       */
      startNumberFrom: number;
      /**
       * Ending number
       */
      startNumberTo: number;
      /**
       * Show start number
       */
      showStartNumber: boolean;
      /**
       * Show name on the number
       */
      showNameOnNumber: boolean;
      /**
       * Minimum age
       */
      ageFrom?: number;
      /**
       * Maximum age
       */
      ageTo?: number;
      /**
       * Cost of the distance
       */
      cost: number;
      /**
       * Is the distance free
       */
      isFree: boolean;
      /**
       * Promo-only registration
       */
      promoOnlyRegistration: boolean;
      /**
       * Allow registration
       */
      allowRegistration: boolean;
      /**
       * Additional options for the distance
       */
      additionalOptions?: Array<{
        /**
         * id
         */
        id?: number;
        /**
         * Type of additional option
         */
        itemType: string;
        /**
         * Price of additional option
         */
        price: number;
      }>;
      /**
       * List of cost change rules for the distance
       */
      costChangeRules?: Array<{
        /**
         * Cost change rule ID
         */
        id?: number;
        /**
         * Updated cost for the distance
         */
        cost: string;
        /**
         * Minimum number of participants to apply this rule
         */
        fromParticipants?: number;
        /**
         * Start date for the cost change rule
         */
        fromDate: Date;
      }>;
      /**
       * List of age categories for the distance
       */
      ageCategories?: Array<{
        /**
         * Age category ID (optional during creation)
         */
        id?: number;
        /**
         * Name of the age category
         */
        name: string;
        /**
         * Gender for the category (e.g., male, female)
         */
        gender: string;
        /**
         * Minimum age for this category
         */
        ageFrom: number;
        /**
         * Maximum age for this category
         */
        ageTo: number;
      }>;
      /**
       * List of promo codes for the distance
       */
      promoCodes?: Array<{
        /**
         * Age category ID (optional during creation)
         */
        id?: number;
        /**
         * Name of the promo code
         */
        name: string;
        /**
         * Type of promo code (e.g., discount, free entry)
         */
        promoType: string;
        /**
         * Value of the discount
         */
        discountValue: number;
        /**
         * Whether the promo code is active
         */
        isActive: boolean;
        /**
         * Whether the promo code can only be used once
         */
        isSingleUse?: boolean;
      }>;
    }>;
    /**
     * Extended description of the event
     */
    extendedDescription?: string;
  };
  path: {
    event_id: string;
    organization_id: string;
  };
};

export type OrganizationEventUpdateResponse = {
  /**
   * Event ID
   */
  id: number;
  /**
   * Event name
   */
  name: string;
  competitionType: Array<{
    /**
     * id of competition type
     */
    id: string;
    /**
     * Type of competition
     */
    name: string;
  }>;
  /**
   * Event start date
   */
  dateFrom: string;
  /**
   * Event end date
   */
  dateTo: string;
  /**
   * Event location
   */
  place: string;
  /**
   * Region of the event
   */
  placeRegion: string;
  /**
   * Event photos URL
   */
  photos?: string;
  /**
   * Short description of the event
   */
  description?: string;
  /**
   * Registration link for the event
   */
  registrationLink?: string;
  /**
   * Hide participants flag
   */
  hideParticipants?: boolean;
  /**
   * Schedule PDF link
   */
  schedulePdf?: string;
  /**
   * Co-Organizer description
   */
  coOrganizer?: string;
  organizer: {
    /**
     * Organizer ID
     */
    id: number;
    users: Array<{
      /**
       * User email
       */
      user: string;
      /**
       * User role
       */
      role: string;
    }>;
    /**
     * Organizer name
     */
    name: string;
    /**
     * Organizer website
     */
    siteUrl?: string;
    /**
     * Organizer phone number
     */
    phoneNumber?: string;
    /**
     * Organizer email
     */
    email: string;
    /**
     * Organizer Instagram URL
     */
    instagramUrl?: string;
    /**
     * Organizer Facebook URL
     */
    facebookUrl?: string;
    /**
     * Organizer Telegram URL
     */
    telegramUrl?: string;
  };
  distances: Array<{
    /**
     * Distance ID
     */
    id: number;
    /**
     * Distance name
     */
    name: string;
    /**
     * Type of competition
     */
    competitionType: string;
    /**
     * Category of participants
     */
    category: string;
    /**
     * Flag for registration availability
     */
    allowRegistration: boolean;
    /**
     * Distance length
     */
    length: string;
    /**
     * Start number range (from)
     */
    startNumberFrom: number;
    /**
     * Start number range (to)
     */
    startNumberTo: number;
    /**
     * Minimum age
     */
    ageFrom?: number;
    /**
     * Maximum age
     */
    ageTo?: number;
    /**
     * Cost of participation
     */
    cost: string;
    /**
     * Flag indicating free participation
     */
    isFree: boolean;
    /**
     * Promo-only registration flag
     */
    promoOnlyRegistration: boolean;
    /**
     * Flag to show name on number
     */
    showNameOnNumber: boolean;
    /**
     * Flag to show start number
     */
    showStartNumber: boolean;
    /**
     * Associated event ID
     */
    event: number;
    additionalOptions?: Array<{
      /**
       * Option ID
       */
      id: number;
      /**
       * Type of additional item
       */
      itemType: string;
      /**
       * Price of additional item
       */
      price: string;
      /**
       * Associated distance ID
       */
      distance: number;
    }>;
    /**
     * List of cost change rules for the distance
     */
    costChangeRules?: Array<{
      /**
       * Cost change rule ID
       */
      id: number;
      /**
       * Updated cost for the distance
       */
      cost: string;
      /**
       * Minimum number of participants to apply this rule
       */
      fromParticipants?: number;
      /**
       * Start date for the cost change rule
       */
      fromDate: Date;
    }>;
    /**
     * List of age categories for the distance
     */
    ageCategories?: Array<{
      /**
       * Age category ID
       */
      id: number;
      /**
       * Name of the age category
       */
      name: string;
      /**
       * Gender for the category (e.g., male, female)
       */
      gender: string;
      /**
       * Minimum age for this category
       */
      ageFrom: number;
      /**
       * Maximum age for this category
       */
      ageTo: number;
    }>;
    /**
     * List of promo codes for the distance
     */
    promoCodes?: Array<{
      /**
       * Promo code ID
       */
      id: number;
      /**
       * Name of the promo code
       */
      name: string;
      /**
       * Type of promo code (e.g., discount, free entry)
       */
      promoType: string;
      /**
       * Value of the discount
       */
      discountValue: number;
      /**
       * Whether the promo code is active
       */
      isActive: boolean;
      /**
       * Whether the promo code can only be used once
       */
      isSingleUse?: boolean;
    }>;
  }>;
  /**
   * Detailed description of the event
   */
  extendedDescription?: string;
};

export type OrganizationEventUpdateError =
  | {
      /**
       * Bad request
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * The competition type does not exist.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventPartialUpdateData = {
  body: {
    /**
     * Name of the event
     */
    name: string;
    /**
     * List of competition types
     */
    competitionType: Array<{
      /**
       * Type of competition
       */
      name: string;
    }>;
    /**
     * Event start date
     */
    dateFrom: Date;
    /**
     * Event end date
     */
    dateTo: Date;
    /**
     * Location of the event
     */
    place: string;
    /**
     * Location of the event
     */
    placeRegion: string;
    /**
     * Event description
     */
    description?: string;
    /**
     * Registration link
     */
    registrationLink?: string;
    /**
     * Whether to hide participants
     */
    hideParticipants?: boolean;
    /**
     * Co-Organizer description
     */
    coOrganizer?: string;
    /**
     * ID of the organizer
     */
    organization_id: number;
    /**
     * List of distances
     */
    distances: Array<{
      /**
       * id
       */
      id?: number;
      /**
       * Name of the distance
       */
      name: string;
      /**
       * Type of competition
       */
      competitionType: string;
      /**
       * Category of participants
       */
      category: string;
      /**
       * Length of the distance in km
       */
      length: number;
      /**
       * Starting number
       */
      startNumberFrom: number;
      /**
       * Ending number
       */
      startNumberTo: number;
      /**
       * Show start number
       */
      showStartNumber: boolean;
      /**
       * Show name on the number
       */
      showNameOnNumber: boolean;
      /**
       * Minimum age
       */
      ageFrom?: number;
      /**
       * Maximum age
       */
      ageTo?: number;
      /**
       * Cost of the distance
       */
      cost: number;
      /**
       * Is the distance free
       */
      isFree: boolean;
      /**
       * Promo-only registration
       */
      promoOnlyRegistration: boolean;
      /**
       * Allow registration
       */
      allowRegistration: boolean;
      /**
       * Additional options for the distance
       */
      additionalOptions?: Array<{
        /**
         * id
         */
        id?: number;
        /**
         * Type of additional option
         */
        itemType: string;
        /**
         * Price of additional option
         */
        price: number;
      }>;
      /**
       * List of cost change rules for the distance
       */
      costChangeRules?: Array<{
        /**
         * Cost change rule ID
         */
        id?: number;
        /**
         * Updated cost for the distance
         */
        cost: string;
        /**
         * Minimum number of participants to apply this rule
         */
        fromParticipants?: number;
        /**
         * Start date for the cost change rule
         */
        fromDate: Date;
      }>;
      /**
       * List of age categories for the distance
       */
      ageCategories?: Array<{
        /**
         * Age category ID (optional during creation)
         */
        id?: number;
        /**
         * Name of the age category
         */
        name: string;
        /**
         * Gender for the category (e.g., male, female)
         */
        gender: string;
        /**
         * Minimum age for this category
         */
        ageFrom: number;
        /**
         * Maximum age for this category
         */
        ageTo: number;
      }>;
      /**
       * List of promo codes for the distance
       */
      promoCodes?: Array<{
        /**
         * Age category ID (optional during creation)
         */
        id?: number;
        /**
         * Name of the promo code
         */
        name: string;
        /**
         * Type of promo code (e.g., discount, free entry)
         */
        promoType: string;
        /**
         * Value of the discount
         */
        discountValue: number;
        /**
         * Whether the promo code is active
         */
        isActive: boolean;
        /**
         * Whether the promo code can only be used once
         */
        isSingleUse?: boolean;
      }>;
    }>;
    /**
     * Extended description of the event
     */
    extendedDescription?: string;
  };
  path: {
    event_id: string;
    organization_id: string;
  };
};

export type OrganizationEventPartialUpdateResponse = {
  /**
   * Event ID
   */
  id: number;
  /**
   * Event name
   */
  name: string;
  competitionType: Array<{
    /**
     * id of competition type
     */
    id: string;
    /**
     * Type of competition
     */
    name: string;
  }>;
  /**
   * Event start date
   */
  dateFrom: string;
  /**
   * Event end date
   */
  dateTo: string;
  /**
   * Event location
   */
  place: string;
  /**
   * Region of the event
   */
  placeRegion: string;
  /**
   * Event photos URL
   */
  photos?: string;
  /**
   * Short description of the event
   */
  description?: string;
  /**
   * Registration link for the event
   */
  registrationLink?: string;
  /**
   * Hide participants flag
   */
  hideParticipants?: boolean;
  /**
   * Schedule PDF link
   */
  schedulePdf?: string;
  /**
   * Co-Organizer description
   */
  coOrganizer?: string;
  organizer: {
    /**
     * Organizer ID
     */
    id: number;
    users: Array<{
      /**
       * User email
       */
      user: string;
      /**
       * User role
       */
      role: string;
    }>;
    /**
     * Organizer name
     */
    name: string;
    /**
     * Organizer website
     */
    siteUrl?: string;
    /**
     * Organizer phone number
     */
    phoneNumber?: string;
    /**
     * Organizer email
     */
    email: string;
    /**
     * Organizer Instagram URL
     */
    instagramUrl?: string;
    /**
     * Organizer Facebook URL
     */
    facebookUrl?: string;
    /**
     * Organizer Telegram URL
     */
    telegramUrl?: string;
  };
  distances: Array<{
    /**
     * Distance ID
     */
    id: number;
    /**
     * Distance name
     */
    name: string;
    /**
     * Type of competition
     */
    competitionType: string;
    /**
     * Category of participants
     */
    category: string;
    /**
     * Flag for registration availability
     */
    allowRegistration: boolean;
    /**
     * Distance length
     */
    length: string;
    /**
     * Start number range (from)
     */
    startNumberFrom: number;
    /**
     * Start number range (to)
     */
    startNumberTo: number;
    /**
     * Minimum age
     */
    ageFrom?: number;
    /**
     * Maximum age
     */
    ageTo?: number;
    /**
     * Cost of participation
     */
    cost: string;
    /**
     * Flag indicating free participation
     */
    isFree: boolean;
    /**
     * Promo-only registration flag
     */
    promoOnlyRegistration: boolean;
    /**
     * Flag to show name on number
     */
    showNameOnNumber: boolean;
    /**
     * Flag to show start number
     */
    showStartNumber: boolean;
    /**
     * Associated event ID
     */
    event: number;
    additionalOptions?: Array<{
      /**
       * Option ID
       */
      id: number;
      /**
       * Type of additional item
       */
      itemType: string;
      /**
       * Price of additional item
       */
      price: string;
      /**
       * Associated distance ID
       */
      distance: number;
    }>;
    /**
     * List of cost change rules for the distance
     */
    costChangeRules?: Array<{
      /**
       * Cost change rule ID
       */
      id: number;
      /**
       * Updated cost for the distance
       */
      cost: string;
      /**
       * Minimum number of participants to apply this rule
       */
      fromParticipants?: number;
      /**
       * Start date for the cost change rule
       */
      fromDate: Date;
    }>;
    /**
     * List of age categories for the distance
     */
    ageCategories?: Array<{
      /**
       * Age category ID
       */
      id: number;
      /**
       * Name of the age category
       */
      name: string;
      /**
       * Gender for the category (e.g., male, female)
       */
      gender: string;
      /**
       * Minimum age for this category
       */
      ageFrom: number;
      /**
       * Maximum age for this category
       */
      ageTo: number;
    }>;
    /**
     * List of promo codes for the distance
     */
    promoCodes?: Array<{
      /**
       * Promo code ID
       */
      id: number;
      /**
       * Name of the promo code
       */
      name: string;
      /**
       * Type of promo code (e.g., discount, free entry)
       */
      promoType: string;
      /**
       * Value of the discount
       */
      discountValue: number;
      /**
       * Whether the promo code is active
       */
      isActive: boolean;
      /**
       * Whether the promo code can only be used once
       */
      isSingleUse?: boolean;
    }>;
  }>;
  /**
   * Detailed description of the event
   */
  extendedDescription?: string;
};

export type OrganizationEventPartialUpdateError =
  | {
      /**
       * Bad request
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * The competition type does not exist.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventDeleteData = {
  path: {
    event_id: string;
    organization_id: string;
  };
};

export type OrganizationEventDeleteResponse = void;

export type OrganizationEventDeleteError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventDistanceUserListData = {
  path: {
    distance_id: string;
    event_id: string;
    organization_id: string;
  };
};

export type OrganizationEventDistanceUserListResponse = DistanceUserList;

export type OrganizationEventDistanceUserListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Not found.
       */
      detail:
        | "Not found."
        | "User not found."
        | "Event not found."
        | "Distance not found."
        | "Organization not found.";
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventDistanceUserReadData = {
  path: {
    distance_id: string;
    event_id: string;
    organization_id: string;
    user_id: string;
  };
};

export type OrganizationEventDistanceUserReadResponse = DistanceUserDetail;

export type OrganizationEventDistanceUserReadError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Not found.
       */
      detail:
        | "Not found."
        | "User not found."
        | "Event not found."
        | "Distance not found."
        | "Organization not found.";
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventDistanceUserCreateData = {
  body: {
    /**
     * User email
     */
    email?: string;
    /**
     * User first name
     */
    firstName: string;
    /**
     * User last name
     */
    lastName: string;
    /**
     * User first name in English
     */
    firstNameEng?: string;
    /**
     * User last name in English
     */
    lastNameEng?: string;
    /**
     * Gender: M for Male, F for Female
     */
    gender?: "M" | "F";
    /**
     * Date of birth
     */
    dateOfBirth?: string;
    /**
     * T-shirt size
     */
    tShirtSize?: "XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
    /**
     * Country
     */
    country?: string;
    /**
     * City
     */
    city?: string;
    /**
     * Phone number
     */
    phoneNumber?: string;
    /**
     * Sports club
     */
    sportsClub?: string;
    /**
     * Emergency contact name
     */
    emergencyContactName?: string;
    /**
     * Emergency contact phone number
     */
    emergencyContactPhone?: string;
    /**
     * Promo code ID
     */
    promoCode?: number;
    /**
     * List of additional item IDs
     */
    additionalItems?: Array<number>;
  };
  path: {
    distance_id: string;
    event_id: string;
    organization_id: string;
    user_id: string;
  };
};

export type OrganizationEventDistanceUserCreateResponse =
  UserDistanceRegistration;

export type OrganizationEventDistanceUserCreateError =
  | {
      /**
       * Invalid data or already registred for this distance.
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * Distance not found or related items are invalid.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventDistanceUserUpdateData = {
  body: DistanceUserDetail;
  path: {
    distance_id: string;
    event_id: string;
    organization_id: string;
    user_id: string;
  };
};

export type OrganizationEventDistanceUserUpdateResponse = DistanceUserDetail;

export type OrganizationEventDistanceUserUpdateError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Not found.
       */
      detail:
        | "Not found."
        | "User not found."
        | "Event not found."
        | "Distance not found."
        | "Organization not found.";
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventDistanceUserPartialUpdateData = {
  body: DistanceUserDetail;
  path: {
    distance_id: string;
    event_id: string;
    organization_id: string;
    user_id: string;
  };
};

export type OrganizationEventDistanceUserPartialUpdateResponse =
  DistanceUserDetail;

export type OrganizationEventDistanceUserPartialUpdateError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Not found.
       */
      detail:
        | "Not found."
        | "User not found."
        | "Event not found."
        | "Distance not found."
        | "Organization not found.";
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationEventDistanceUserDeleteData = {
  path: {
    distance_id: string;
    event_id: string;
    organization_id: string;
    user_id: string;
  };
};

export type OrganizationEventDistanceUserDeleteResponse = void;

export type OrganizationEventDistanceUserDeleteError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Not found.
       */
      detail:
        | "Not found."
        | "User not found."
        | "Event not found."
        | "Distance not found."
        | "Organization not found.";
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type OrganizationInviteOrganizerCreateData = {
  body: {
    /**
     * User email
     */
    email: string;
    /**
     * Message to user
     */
    message?: string;
  };
  path: {
    organization_id: string;
  };
};

export type OrganizationInviteOrganizerCreateResponse = unknown;

export type OrganizationInviteOrganizerCreateError = unknown;

export type UserDistanceRegisterListData = {
  query?: {
    /**
     * Page number for pagination
     */
    page?: string;
    /**
     * Filter by status: "active" or "archive".
     */
    status?: "active" | "archive";
  };
};

export type UserDistanceRegisterListResponse = {
  pagination: {
    next_page?: string;
    current_page: number;
    previous_page?: string;
    num_pages: number;
  };
  /**
   * Total item count
   */
  items_count: number;
  items: Array<{
    /**
     * User ID
     */
    id: number;
    /**
     * Date of registration
     */
    registrationDate: Date;
    /**
     * Email
     */
    email: string;
    /**
     * First name
     */
    firstName: string;
    /**
     * Last name
     */
    lastName: string;
    /**
     * First name in English
     */
    firstNameEng?: string;
    /**
     * Last name in English
     */
    lastNameEng?: string;
    /**
     * Gender
     */
    gender: "M" | "F";
    /**
     * Date of birth
     */
    dateOfBirth: Date;
    /**
     * T-shirt size
     */
    tShirtSize: string;
    /**
     * Country
     */
    country: string;
    /**
     * City
     */
    city: string;
    /**
     * Phone number
     */
    phoneNumber: string;
    /**
     * Sports club
     */
    sportsClub?: string;
    /**
     * Emergency contact name
     */
    emergencyContactName: string;
    /**
     * Emergency contact phone
     */
    emergencyContactPhone: string;
    /**
     * Promo code
     */
    promoCode?: string;
    additionalItems?: Array<unknown>;
  }>;
};

export type UserDistanceRegisterListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserDistanceRegisterCreateData = {
  body: {
    /**
     * User email
     */
    email?: string;
    /**
     * User first name
     */
    firstName: string;
    /**
     * User last name
     */
    lastName: string;
    /**
     * User first name in English
     */
    firstNameEng?: string;
    /**
     * User last name in English
     */
    lastNameEng?: string;
    /**
     * Gender: M for Male, F for Female
     */
    gender?: "M" | "F";
    /**
     * Date of birth
     */
    dateOfBirth?: string;
    /**
     * T-shirt size
     */
    tShirtSize?: "XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";
    /**
     * Country
     */
    country?: string;
    /**
     * City
     */
    city?: string;
    /**
     * Phone number
     */
    phoneNumber?: string;
    /**
     * Sports club
     */
    sportsClub?: string;
    /**
     * Emergency contact name
     */
    emergencyContactName?: string;
    /**
     * Emergency contact phone number
     */
    emergencyContactPhone?: string;
    /**
     * Promo code ID
     */
    promoCode?: number;
    /**
     * List of additional item IDs
     */
    additionalItems?: Array<number>;
  };
  path: {
    distance_id: string;
  };
};

export type UserDistanceRegisterCreateResponse = UserDistanceRegistration;

export type UserDistanceRegisterCreateError =
  | {
      /**
       * Invalid data or already registred for this distance.
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * Distance not found or related items are invalid.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserEventLikeListData = {
  query?: {
    /**
     * Page number for pagination
     */
    page?: string;
    /**
     * Filter by status: "active" or "archive".
     */
    status?: "active" | "archive";
  };
};

export type UserEventLikeListResponse = {
  pagination: {
    /**
     * URL of the next page, or null if there are no more pages
     */
    next_page?: string;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * URL of the previous page, or null if on the first page
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of items
   */
  items_count: number;
  /**
   * List of events
   */
  items: Array<{
    /**
     * Event ID
     */
    id: number;
    /**
     * Event Name
     */
    name: string;
    /**
     * Start date of the event
     */
    dateFrom: Date;
    /**
     * End date of the event
     */
    dateTo: Date;
  }>;
};

export type UserEventLikeListError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserEventLikeCreateData = {
  path: {
    event_id: string;
  };
};

export type UserEventLikeCreateResponse = {
  /**
   * Event liked successfully.
   */
  detail: string;
};

export type UserEventLikeCreateError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserEventLikeDeleteData = {
  path: {
    event_id: string;
  };
};

export type UserEventLikeDeleteResponse = {
  /**
   * Event unliked successfully.
   */
  message?: string;
};

export type UserEventLikeDeleteError =
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Organization not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileListResponse = UserProfile;

export type UserProfileListError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to access this resource.
       */
      detail: string;
    }
  | {
      /**
       * The requested resource does not exist.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileUpdateData = {
  body: UserProfile;
};

export type UserProfileUpdateResponse = UserProfile;

export type UserProfileUpdateError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to update this resource.
       */
      detail: string;
    }
  | {
      /**
       * The resource to update does not exist.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfilePartialUpdateData = {
  body: UserProfile;
};

export type UserProfilePartialUpdateResponse = UserProfile;

export type UserProfilePartialUpdateError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to partially update this resource.
       */
      detail: string;
    }
  | {
      /**
       * The resource to partially update does not exist.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileAdditionalProfileListResponse = Array<AdditionalProfile>;

export type UserProfileAdditionalProfileListError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to access this resource.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileAdditionalProfileCreateData = {
  body: AdditionalProfile;
};

export type UserProfileAdditionalProfileCreateResponse = AdditionalProfile;

export type UserProfileAdditionalProfileCreateError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to create this resource.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileAdditionalProfileReadData = {
  path: {
    profile_id: string;
  };
};

export type UserProfileAdditionalProfileReadResponse = AdditionalProfile;

export type UserProfileAdditionalProfileReadError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to access this resource.
       */
      detail: string;
    }
  | unknown
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileAdditionalProfileUpdateData = {
  body: AdditionalProfile;
  path: {
    profile_id: string;
  };
};

export type UserProfileAdditionalProfileUpdateResponse = AdditionalProfile;

export type UserProfileAdditionalProfileUpdateError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to update this resource.
       */
      detail: string;
    }
  | unknown
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileAdditionalProfilePartialUpdateData = {
  body: AdditionalProfile;
  path: {
    profile_id: string;
  };
};

export type UserProfileAdditionalProfilePartialUpdateResponse =
  AdditionalProfile;

export type UserProfileAdditionalProfilePartialUpdateError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to update this resource.
       */
      detail: string;
    }
  | unknown
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserProfileAdditionalProfileDeleteData = {
  path: {
    profile_id: string;
  };
};

export type UserProfileAdditionalProfileDeleteResponse = void;

export type UserProfileAdditionalProfileDeleteError =
  | {
      /**
       * Invalid request parameters or data.
       */
      detail: string;
    }
  | {
      /**
       * Invalid credentials.
       */
      detail: string;
    }
  | {
      /**
       * Insufficient permissions to delete this resource.
       */
      detail: string;
    }
  | unknown
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };

export type UserPublicEventListResponse = {
  pagination: {
    /**
     * URL for the next page of results
     */
    next_page?: string;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * URL for the previous page of results
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of events
   */
  items_count: number;
  items: Array<{
    id: number;
    name: string;
    organizer: {
      user: string;
      organization: string;
    };
    competitionType?: Array<{
      id: number;
      name: string;
    }>;
    dateFrom: string;
    dateTo: string;
    placeRegion: string;
    place: string;
    /**
     * Event photos (nullable)
     */
    photos?: unknown;
    distances: Array<{
      name: string;
    }>;
  }>;
};

export type UserPublicEventListError =
  | {
      /**
       * Event not found.
       */
      detail: string;
    }
  | {
      /**
       * Internal server error while retrieving the event.
       */
      detail: string;
    };

export type UserPublicEventFilterListData = {
  query?: {
    /**
     * Type of competition (e.g., running, trail, cycling)
     */
    competition_type?: Array<string>;
    /**
     * Start date of the event (YYYY-MM-DD)
     */
    dateFrom?: string;
    /**
     * End date of the event (YYYY-MM-DD)
     */
    dateTo?: string;
    /**
     * Maximum distance (km)
     */
    distance_max?: number;
    /**
     * Minimum distance (km)
     */
    distance_min?: number;
    /**
     * Event name
     */
    name?: string;
    /**
     * Page number for pagination
     */
    page?: string;
    /**
     * Event location (select from available regions)
     */
    place?:
      | "vinnytsia_region"
      | "volyn_region"
      | "dnipropetrovsk_region"
      | "donetsk_region"
      | "zhytomyr_region"
      | "zakarpattia_region"
      | "zaporizhzhia_region"
      | "ivano-frankivsk_region"
      | "kyiv_region"
      | "kirovohrad_region"
      | "luhansk_region"
      | "lviv_region"
      | "mykolaiv_region"
      | "odesa_region"
      | "poltava_region"
      | "rivne_region"
      | "sumy_region"
      | "ternopil_region"
      | "kharkiv_region"
      | "kherson_region"
      | "khmelnytskyi_region"
      | "cherkasy_region"
      | "chernihiv_region"
      | "chernivtsi_region";
  };
};

export type UserPublicEventFilterListResponse = {
  pagination: {
    /**
     * URL for the next page of results
     */
    next_page?: string;
    /**
     * Current page number
     */
    current_page: number;
    /**
     * URL for the previous page of results
     */
    previous_page?: string;
    /**
     * Total number of pages
     */
    num_pages: number;
  };
  /**
   * Total number of events matching the filters
   */
  items_count: number;
  items: Array<{
    id: number;
    name: string;
    organizer: {
      user: string;
      organization: string;
    };
    competitionType: Array<{
      id: number;
      name: string;
    }>;
    dateFrom: string;
    dateTo: string;
    placeRegion: string;
    place: string;
    photos?: unknown;
    distances: Array<{
      name: string;
    }>;
  }>;
};

export type UserPublicEventFilterListError =
  | {
      /**
       * Invalid filter parameters. Possible errors include invalid date format, region, or distance range. For example, distance_min must be less than or equal to distance_max.
       */
      error: string;
    }
  | {
      /**
       * Internal server error while processing the request.
       */
      error: string;
    };

export type UserPublicEventReadData = {
  path: {
    event_id: string;
  };
};

export type UserPublicEventReadResponse = Event;

export type UserPublicEventReadError =
  | {
      /**
       * Event not found.
       */
      detail: string;
    }
  | {
      /**
       * Internal server error while retrieving the event.
       */
      detail: string;
    };

export type UserRequestOrganizerCreateResponse = unknown;

export type UserRequestOrganizerCreateError =
  | {
      /**
       * You already have a pending request.
       */
      detail: string;
    }
  | {
      /**
       * Authentication credentials were not provided.
       */
      detail: string;
    }
  | {
      /**
       * You do not have permission to perform this action.
       */
      detail: string;
    }
  | {
      /**
       * Request not found.
       */
      detail: string;
    }
  | {
      /**
       * An unexpected error occurred on the server.
       */
      detail: string;
    };
